#include <stdio.h>
#include <limits.h>

#define V 4  // Number of vertices

// Function to perform Floyd-Warshall algorithm
void floydWarshall(int graph[V][V]) {
    int dist[V][V], i, j, k;

    // Initialize the distance matrix with the graph's adjacency matrix
    for (i = 0; i < V; i++) {
        for (j = 0; j < V; j++) {
            dist[i][j] = graph[i][j];
        }
    }

    // Floyd-Warshall algorithm to find the shortest path between all pairs of vertices
    for (k = 0; k < V; k++) {
        for (i = 0; i < V; i++) {
            for (j = 0; j < V; j++) {
                // Check for overflow and update the distance if a shorter path is found
                if (dist[i][k] != 9999999 && dist[k][j] != 9999999 && dist[i][j] > dist[i][k] + dist[k][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }

    // Print the shortest distance matrix
    printf("Shortest distance matrix:\n");
    for (i = 0; i < V; i++) {
        for (j = 0; j < V; j++) {
            if (dist[i][j] == 9999999)
                printf("INF\t");  // Represent infinity as INF
            else
                printf("%d\t", dist[i][j]);
        }
        printf("\n");
    }
}

int main() {
    // Adjacency matrix for the graph
    int graph[V][V] = {
        {0, 5, 9999999, 10},
        {9999999, 0, 3, 9999999},
        {9999999, 9999999, 0, 1},
        {9999999, 9999999, 9999999, 0}
    };

    // Call Floyd-Warshall algorithm
    floydWarshall(graph);
    
    return 0;
}
