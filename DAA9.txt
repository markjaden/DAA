#include <stdio.h>

#define N 8  // Size of the chessboard

// Function to check if it's safe to place a queen at board[row][col]
int isSafe(int board[N][N], int row, int col) {
    int i, j;

    // Check for any queens in the same row
    for (i = 0; i < col; i++) {
        if (board[row][i] == 1) {
            return 0;  // Not safe
        }
    }

    // Check upper diagonal on left side
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 1) {
            return 0;  // Not safe
        }
    }

    // Check lower diagonal on left side
    for (i = row, j = col; i < N && j >= 0; i++, j--) {
        if (board[i][j] == 1) {
            return 0;  // Not safe
        }
    }

    return 1;  // Safe to place the queen
}

// Function to solve the N-Queens problem using backtracking
int solveNQueens(int board[N][N], int col) {
    // If all queens are placed, return true
    if (col == N) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (board[i][j] == 1) {
                    printf("Q ");
                } else {
                    printf(". ");
                }
            }
            printf("\n");
        }
        printf("\n");
        return 1;
    }

    // Try placing a queen in each row of the current column
    for (int i = 0; i < N; i++) {
        if (isSafe(board, i, col)) {
            board[i][col] = 1;  // Place the queen
            if (solveNQueens(board, col + 1)) {
                return 1;  // If placing queen leads to a solution, return true
            }
            board[i][col] = 0;  // Backtrack if placing queen doesn't lead to a solution
        }
    }

    return 0;  // No solution found in this column
}

int main() {
    int board[N][N] = {0};  // Initialize the chessboard with all zeros (empty spots)

    // Try to solve the N-Queens problem
    if (!solveNQueens(board, 0)) {
        printf("No solution found\n");
    }

    return 0;
}
