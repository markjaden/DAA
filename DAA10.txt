#include <stdio.h>

#define MAX_SIZE 100  // Define a maximum size for the set

int n;          // Number of elements in the set
int targetSum;  // The target sum

// Function to print a subset
void printSubset(int subset[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", subset[i]);
    }
    printf("\n");
}

// Function to find subsets that sum to the target sum
void sumOfSubsets(int set[], int subset[], int subsetSize, int total, int index) {
    if (total == targetSum) {
        printSubset(subset, subsetSize);  // If the sum is equal to target, print the subset
        return;
    }

    // Generate subsets by including/excluding elements
    for (int i = index; i < n; i++) {
        subset[subsetSize] = set[i];  // Include set[i] in the current subset
        sumOfSubsets(set, subset, subsetSize + 1, total + set[i], i + 1);  // Recurse to the next element
    }
}

int main() {
    printf("Enter the number of elements in the set: ");
    scanf("%d", &n);

    if (n > MAX_SIZE) {
        printf("Error: Number of elements exceeds maximum size (%d).\n", MAX_SIZE);
        return 1;
    }

    int set[MAX_SIZE];  // Declare the set array with fixed size

    printf("Enter the elements of the set:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &set[i]);
    }

    printf("Enter the target sum: ");
    scanf("%d", &targetSum);

    int subset[MAX_SIZE];  // Subset array to store potential subsets
    printf("Subsets with sum equal to %d are:\n", targetSum);

    // Call the recursive function to find subsets
    sumOfSubsets(set, subset, 0, 0, 0);

    return 0;
}
