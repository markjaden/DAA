#include <stdio.h>

#define MAX_WEIGHT 100  // Maximum capacity of the knapsack
#define MAX_ITEMS 50    // Maximum number of items

// Function to calculate the maximum value of the knapsack
int knapsack(int W, int wt[], int val[], int n) {
    int dp[MAX_ITEMS + 1][MAX_WEIGHT + 1];  // Fixed-size DP array

    // Initialize the dp array
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0)
                dp[i][w] = 0;
            else if (wt[i - 1] <= w)
                dp[i][w] = (val[i - 1] + dp[i - 1][w - wt[i - 1]] > dp[i - 1][w]) ?
                           (val[i - 1] + dp[i - 1][w - wt[i - 1]]) : dp[i - 1][w];
            else
                dp[i][w] = dp[i - 1][w];
        }
    }
    return dp[n][W];  // Return the maximum value that can be obtained
}

int main() {
    int val[] = {70, 700, 220};  // Values of items
    int wt[] = {10, 30, 40};     // Weights of items
    int W = 70;                  // Capacity of the knapsack
    int n = sizeof(val) / sizeof(val[0]);  // Number of items

    // Output the result of the knapsack problem
    printf("Maximum value in Knapsack: %d\n", knapsack(W, wt, val, n));

    return 0;
}
